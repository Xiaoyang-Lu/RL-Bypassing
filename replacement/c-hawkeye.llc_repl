#include "cache.h"
#include <map>

#define maxRRPV 7
uint32_t rrpv[LLC_SET][LLC_WAY];

#define TIMER_SIZE 1024
uint64_t perset_mytimer[LLC_SET];
uint64_t signatures[LLC_SET][LLC_WAY];
bool prefetched[LLC_SET][LLC_WAY];

#define MAX_SHCT 31
#define SHCT_SIZE_BITS 14
#define SHCT_SIZE (1<<SHCT_SIZE_BITS)
#include "hawkeye_predictor.h"
HAWKEYE_PC_PREDICTOR* demand_predictor;  //Predictor
HAWKEYE_PC_PREDICTOR* prefetch_predictor;  //Predictor

#define OPTGEN_VECTOR_SIZE 128
#include "optgen.h"
OPTgen perset_optgen[LLC_SET]; // per-set occupancy vectors; we only use 64 of these

#include <math.h>
#define bitmask(l) (((l) == 64) ? (unsigned long long)(-1LL) : ((1LL << (l))-1LL))
#define bits(x, i, l) (((x) >> (i)) & bitmask(l))
#//Sample 64 sets per core
#define SAMPLED_SET(set) (bits(set, 0 , 8) == bits(set, ((unsigned long long)log2(LLC_SET) - 8), 8) )

// Sampler to track 8x cache history for sampled sets
// 2800 entris * 4 bytes per entry = 11.2KB
#define SAMPLED_CACHE_SIZE 2800*NUM_CPUS
#define SAMPLER_WAY 8
#define SAMPLER_SET SAMPLED_CACHE_SIZE/SAMPLER_WAY
vector<map<uint64_t, ADDR_INFO> > addr_history; // Sampler

//add PMC parameters

uint32_t miss_count = 0;
uint32_t larger;
uint32_t smaller;
uint32_t thresh = 350;
uint32_t miss_period = LLC_WAY * LLC_SET / 2;


uint32_t level_0_low = 0;
uint32_t level_0_high = 49;
uint32_t level_1_low = 50;
uint32_t level_1_high = 99;
uint32_t level_2_low = 100;
uint32_t level_2_high = 149;
uint32_t level_3_low = 150;
uint32_t level_3_high = 199;
uint32_t level_4_low = 200;
uint32_t level_4_high = 249;
uint32_t level_5_low = 250;
uint32_t level_5_high = 299;
uint32_t level_6_low = 300;
uint32_t level_6_high = 349;
uint32_t level_7_low = 350;


// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            rrpv[i][j] = maxRRPV;
            signatures[i][j] = 0;
            prefetched[i][j] = false;
        }
        perset_mytimer[i] = 0;
        perset_optgen[i].init(LLC_WAY-2);
    }

    addr_history.resize(SAMPLER_SET);
    for (int i=0; i<SAMPLER_SET; i++) 
        addr_history[i].clear();

    demand_predictor = new HAWKEYE_PC_PREDICTOR();
    prefetch_predictor = new HAWKEYE_PC_PREDICTOR();

    cout << "Initialize Hawkeye state" << endl;

}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // look for the maxRRPV line
    for (uint32_t i=0; i<LLC_WAY; i++)
        if (rrpv[set][i] == maxRRPV)
            return i;

    //If we cannot find a cache-averse line, we evict the oldest cache-friendly line
    uint32_t max_rrip = 0;
    int32_t lru_victim = -1;
    for (uint32_t i=0; i<LLC_WAY; i++)
    {
        if (rrpv[set][i] >= max_rrip)
        {
            max_rrip = rrpv[set][i];
            lru_victim = i;
        }
    }

    assert (lru_victim != -1);
    //The predictor is trained negatively on LRU evictions
    if( SAMPLED_SET(set) )
    {
        if(prefetched[set][lru_victim])
            prefetch_predictor->decrement(signatures[set][lru_victim]);
        else
            demand_predictor->decrement(signatures[set][lru_victim]);
    }
    return lru_victim;

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

void replace_addr_history_element(unsigned int sampler_set)
{
    uint64_t lru_addr = 0;
    
    for(map<uint64_t, ADDR_INFO>::iterator it=addr_history[sampler_set].begin(); it != addr_history[sampler_set].end(); it++)
    {
   //     uint64_t timer = (it->second).last_quanta;

        if((it->second).lru == (SAMPLER_WAY-1))
        {
            //lru_time =  (it->second).last_quanta;
            lru_addr = it->first;
            break;
        }
    }

    addr_history[sampler_set].erase(lru_addr);
}

void update_addr_history_lru(unsigned int sampler_set, unsigned int curr_lru)
{
    for(map<uint64_t, ADDR_INFO>::iterator it=addr_history[sampler_set].begin(); it != addr_history[sampler_set].end(); it++)
    {
        if((it->second).lru < curr_lru)
        {
            (it->second).lru++;
            assert((it->second).lru < SAMPLER_WAY); 
        }
    }
}



// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    full_addr = (full_addr >> 6) << 6;

    if(type == PREFETCH)
    {
        if (!hit)
            prefetched[set][way] = true;
    }
    else
        prefetched[set][way] = false;

    if (type == WRITEBACK)
        return;



    if(SAMPLED_SET(set))
    {

        uint64_t curr_quanta = perset_mytimer[set] % OPTGEN_VECTOR_SIZE;

        uint32_t sampler_set = (full_addr >> 6) % SAMPLER_SET; 
        uint64_t sampler_tag = CRC(full_addr >> 12) % 256;
        assert(sampler_set < SAMPLER_SET);

        if((addr_history[sampler_set].find(sampler_tag) != addr_history[sampler_set].end()) && (type != PREFETCH))
        {
            unsigned int curr_timer = perset_mytimer[set];
            if(curr_timer < addr_history[sampler_set][sampler_tag].last_quanta)
               curr_timer = curr_timer + TIMER_SIZE;
            bool wrap =  ((curr_timer - addr_history[sampler_set][sampler_tag].last_quanta) > OPTGEN_VECTOR_SIZE);
            uint64_t last_quanta = addr_history[sampler_set][sampler_tag].last_quanta % OPTGEN_VECTOR_SIZE;

            if( !wrap && perset_optgen[set].should_cache(curr_quanta, last_quanta))
            {
                if(addr_history[sampler_set][sampler_tag].prefetched)
                    prefetch_predictor->increment(addr_history[sampler_set][sampler_tag].ip);
                else
                    demand_predictor->increment(addr_history[sampler_set][sampler_tag].ip);
            }
            else
            {

                if(addr_history[sampler_set][sampler_tag].prefetched)
                    prefetch_predictor->decrement(addr_history[sampler_set][sampler_tag].ip);
                else
                    demand_predictor->decrement(addr_history[sampler_set][sampler_tag].ip);
            }

            perset_optgen[set].add_access(curr_quanta);
            update_addr_history_lru(sampler_set, addr_history[sampler_set][sampler_tag].lru);


            addr_history[sampler_set][sampler_tag].prefetched = false;
        }

        else if(addr_history[sampler_set].find(sampler_tag) == addr_history[sampler_set].end())
        {

            if(addr_history[sampler_set].size() == SAMPLER_WAY) 
                replace_addr_history_element(sampler_set);

            assert(addr_history[sampler_set].size() < SAMPLER_WAY);

            addr_history[sampler_set][sampler_tag].init(curr_quanta);

            if(type == PREFETCH)
            {
                addr_history[sampler_set][sampler_tag].mark_prefetch();
                perset_optgen[set].add_prefetch(curr_quanta);
            }
            else
                perset_optgen[set].add_access(curr_quanta);
            update_addr_history_lru(sampler_set, SAMPLER_WAY-1);
        }
        else 
        {
            assert(addr_history[sampler_set].find(sampler_tag) != addr_history[sampler_set].end());

            uint64_t last_quanta = addr_history[sampler_set][sampler_tag].last_quanta % OPTGEN_VECTOR_SIZE;
            if (perset_mytimer[set] - addr_history[sampler_set][sampler_tag].last_quanta < 5*NUM_CPUS) 
            {
                if(perset_optgen[set].should_cache(curr_quanta, last_quanta))
                {
                    if(addr_history[sampler_set][sampler_tag].prefetched)
                        prefetch_predictor->increment(addr_history[sampler_set][sampler_tag].ip);
                    else
                       demand_predictor->increment(addr_history[sampler_set][sampler_tag].ip);
                }
            }


            addr_history[sampler_set][sampler_tag].mark_prefetch(); 

            perset_optgen[set].add_prefetch(curr_quanta);
            update_addr_history_lru(sampler_set, addr_history[sampler_set][sampler_tag].lru);
        }


        bool new_prediction = demand_predictor->get_prediction (ip);
        if (type == PREFETCH)
            new_prediction = prefetch_predictor->get_prediction (ip);

        addr_history[sampler_set][sampler_tag].update(perset_mytimer[set], ip, new_prediction);
        addr_history[sampler_set][sampler_tag].lru = 0;

        perset_mytimer[set] = (perset_mytimer[set]+1) % TIMER_SIZE;
    }

    bool new_prediction = demand_predictor->get_prediction (ip);
    if (type == PREFETCH)
        new_prediction = prefetch_predictor->get_prediction (ip);

    signatures[set][way] = ip;

//add PMC dynamic threshold

    if(miss_count >= miss_period)
    {
	miss_count = 0;
        if(larger < miss_period * (0.5/100))
	{
		uint32_t num = thresh / 7;
		num = num - 10;
		level_0_low = 0;
		level_0_high = level_0_low + num - 1;
		level_1_low = level_0_high + 1;
		level_1_high = level_1_low + num - 1;
                level_2_low = level_1_high + 1;
                level_2_high = level_2_low + num - 1;
                level_3_low = level_2_high + 1;
                level_3_high = level_3_low + num - 1;
                level_4_low = level_3_high + 1;
                level_4_high = level_4_low + num - 1;
                level_5_low = level_4_high + 1;
                level_5_high = level_5_low + num - 1;
                level_6_low = level_5_high + 1;
                level_6_high = level_6_low + num - 1;
		thresh = thresh - 70;
		larger = 0;
	}
	else if (larger > miss_period * (5/100))
	{
		uint32_t num = thresh / 7;
		num = num + 10;
		level_0_low = 0;
		level_0_high = level_0_low + num - 1;
                level_1_low = level_0_high + 1;
                level_1_high = level_1_low + num - 1;
                level_2_low = level_1_high + 1;
                level_2_high = level_2_low + num - 1;
                level_3_low = level_2_high + 1;
                level_3_high = level_3_low + num - 1;
                level_4_low = level_3_high + 1;
                level_4_high = level_4_low + num - 1;
                level_5_low = level_4_high + 1;
                level_5_high = level_5_low + num - 1;
                level_6_low = level_5_high + 1;
                level_6_high = level_6_low + num - 1;
		thresh = thresh + 70;
                larger = 0;
	}
    }

    if(!new_prediction)
    {
        rrpv[set][way] = maxRRPV;
    }
    else
    {
	rrpv[set][way] = 0;
        if(!hit)
        {
            bool saturated = false;
            for(uint32_t i=0; i<LLC_WAY; i++)
                if (rrpv[set][i] == maxRRPV-1)
                    saturated = true;


            for(uint32_t i=0; i<LLC_WAY; i++)
            {
                if (!saturated && rrpv[set][i] < maxRRPV-1)
                    rrpv[set][i]++;
            }
	   
	    if(level_0_low <= block[set][way].pmc && block[set][way].pmc <= level_0_high)
	    {
		rrpv[set][way] = 6;
	    }
	    else if (level_1_low <= block[set][way].pmc && block[set][way].pmc <= level_3_high)
	    {
		rrpv[set][way] = 4;
	    }
	    else if (level_4_low <= block[set][way].pmc && block[set][way].pmc <= level_6_high)
	    {
		rrpv[set][way] = 4;
	    }
	    else
	    {
		rrpv[set][way] = 0;
	    }		  
        }
    }
    if(!hit)
    {
	miss_count++;
    	if(block[set][way].pmc >= thresh)
    	{
		larger++;
    	}
    }	

}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
