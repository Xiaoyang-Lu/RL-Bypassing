#include "cache.h"
#include <cstdlib>
#include <ctime>

#define NUM_CORE NUM_CPUS
#define MAX_LLC_SETS LLC_SET
#define LLC_WAYS LLC_WAY

#define SAT_INC(x,max)  (x<max)?x+1:x
#define SAT_DEC(x)      (x>0)?x-1:x
#define TRUE 1
#define FALSE 0
#
#define RRIP_OVERRIDE_PERC   0

#define maxRRPV 7
uint32_t line_rrpv[MAX_LLC_SETS][LLC_WAYS];
uint32_t is_prefetch[MAX_LLC_SETS][LLC_WAYS];
uint32_t fill_core[MAX_LLC_SETS][LLC_WAYS];

#define NUM_LEADER_SETS   64

uint32_t ship_sample[MAX_LLC_SETS];
uint32_t line_reuse[MAX_LLC_SETS][LLC_WAYS];
uint64_t line_sig[MAX_LLC_SETS][LLC_WAYS];

#define maxSHCTR 7
#define SHCT_SIZE (1<<14)

//add PMC parameters

uint32_t miss_count = 0;
uint32_t larger;
uint32_t smaller;
uint32_t thresh = 350;
uint32_t miss_period = LLC_WAY * LLC_SET / 2;


uint32_t level_0_low = 0;
uint32_t level_0_high = 49;
uint32_t level_1_low = 50;
uint32_t level_1_high = 99;
uint32_t level_2_low = 100;
uint32_t level_2_high = 149;
uint32_t level_3_low = 150;
uint32_t level_3_high = 199;
uint32_t level_4_low = 200;
uint32_t level_4_high = 249;
uint32_t level_5_low = 250;
uint32_t level_5_high = 299;
uint32_t level_6_low = 300;
uint32_t level_6_high = 349;
uint32_t level_7_low = 350;



class SHCT_class {
  public:
    uint32_t counter;
    uint32_t pmcl;

    SHCT_class() {
        counter = 1;
        pmcl = (1 + maxSHCTR)/2;
    };
};


SHCT_class SHCT[NUM_CORE][SHCT_SIZE];




uint64_t insertion_distrib[NUM_TYPES][maxRRPV+1];
uint64_t total_prefetch_downgrades;


// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    int LLC_SETS =  MAX_LLC_SETS;

    cout << "Initialize SRRIP state" << endl;

    for (int i=0; i<MAX_LLC_SETS; i++) {
        for (int j=0; j<LLC_WAYS; j++) {
            line_rrpv[i][j] = maxRRPV;
            line_reuse[i][j] = FALSE;
            is_prefetch[i][j] = FALSE;
            line_sig[i][j] = 0;
        }
    }

    for (int i=0; i<NUM_CORE; i++) {
        for (int j=0; j<SHCT_SIZE; j++) {
            SHCT[i][j].counter = 1; // Assume weakly re-use start
	    SHCT[i][j].pmcl = (1 + maxSHCTR)/2;
        }
    }

    int leaders=0;

    while(leaders<NUM_LEADER_SETS){
      int randval = rand()%LLC_SETS;
      
      if(ship_sample[randval]==0){
	ship_sample[randval]=1;
	leaders++;
      }
    }
}


// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    while (1)
    {
        for (int i=0; i<LLC_WAYS; i++)
            if (line_rrpv[set][i] == maxRRPV) { // found victim
                return i;
            }

        for (int i=0; i<LLC_WAYS; i++)
            line_rrpv[set][i]++;
    }
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{

  uint32_t sig   = line_sig[set][way];

    if(miss_count >= miss_period)
    {
        miss_count = 0;
        if(larger < miss_period * (0.5/100))
        {
                uint32_t num = thresh / 7;
                num = num - 10;
                level_0_low = 0;
                level_0_high = level_0_low + num - 1;
                level_1_low = level_0_high + 1;
                level_1_high = level_1_low + num - 1;
                level_2_low = level_1_high + 1;
                level_2_high = level_2_low + num - 1;
                level_3_low = level_2_high + 1;
                level_3_high = level_3_low + num - 1;
                level_4_low = level_3_high + 1;
                level_4_high = level_4_low + num - 1;
                level_5_low = level_4_high + 1;
                level_5_high = level_5_low + num - 1;
                level_6_low = level_5_high + 1;
                level_6_high = level_6_low + num - 1;
                thresh = thresh - 70;
                larger = 0;
        }
        else if (larger > miss_period * (5/100))
        {
                uint32_t num = thresh / 7;
                num = num + 10;
                level_0_low = 0;
                level_0_high = level_0_low + num - 1;
                level_1_low = level_0_high + 1;
                level_1_high = level_1_low + num - 1;
                level_2_low = level_1_high + 1;
                level_2_high = level_2_low + num - 1;
                level_3_low = level_2_high + 1;
                level_3_high = level_3_low + num - 1;
                level_4_low = level_3_high + 1;
                level_4_high = level_4_low + num - 1;
                level_5_low = level_4_high + 1;
                level_5_high = level_5_low + num - 1;
                level_6_low = level_5_high + 1;
                level_6_high = level_6_low + num - 1;
                thresh = thresh + 70;
                larger = 0;
        }
    }

    int pmc_level = 0;

    if(!hit)
    {
        miss_count++;
        if(block[set][way].pmc >= thresh)
        {
                larger++;
        }

        if(type == WRITEBACK)
        {
                pmc_level = 0;
        }
        else if(level_0_low <= block[set][way].pmc && block[set][way].pmc <= level_0_high)
        {
                pmc_level = 0;
        }
        else if (level_1_low <= block[set][way].pmc && block[set][way].pmc <= level_3_high)
        {
                pmc_level = 1;
        }
        else if (level_4_low <= block[set][way].pmc && block[set][way].pmc <= level_6_high)
        {
                pmc_level = 1;
        }
        else
        {
                pmc_level = 3;
        }
    }


    if (hit) { // update to REREF on hit
        if( type != WRITEBACK ) 
        {

            if( (type == PREFETCH) && is_prefetch[set][way] )
            {
//                line_rrpv[set][way] = 0;
                
                if( (ship_sample[set] == 1) && ((rand()%100 <5) )) 
                {
                    uint32_t fill_cpu = fill_core[set][way];

                    SHCT[fill_cpu][sig].counter = SAT_INC(SHCT[fill_cpu][sig].counter, maxSHCTR);
                    line_reuse[set][way] = TRUE;
                }
            }
            else 
            {
		line_rrpv[set][way] = 0;
		if(ship_sample[set] == 1)
		{
			uint32_t fill_cpu = fill_core[set][way];
			if(SHCT[fill_cpu][sig].counter != 0)
			{
				line_rrpv[set][way] = 0;
			}
			else
			{
				if (line_rrpv[set][way] > 0)
				{
					line_rrpv[set][way]--;
				}
			}
		}
                if( is_prefetch[set][way] )
                {
                    line_rrpv[set][way] = maxRRPV;
                    is_prefetch[set][way] = FALSE;
                    total_prefetch_downgrades++;
                }

                if( (ship_sample[set] == 1) && (line_reuse[set][way]==0) ) 
                {
                    uint32_t fill_cpu = fill_core[set][way];

                    SHCT[fill_cpu][sig].counter = SAT_INC(SHCT[fill_cpu][sig].counter, maxSHCTR);
                    line_reuse[set][way] = TRUE;
                }
            }
        }
        
	return;
    }
    
    //--- All of the below is done only on misses -------
    // remember signature of what is being inserted
    uint64_t use_PC = (type == PREFETCH ) ? ((ip << 1) + 1) : (ip<<1);
    uint32_t new_sig = use_PC%SHCT_SIZE;
    
    if( ship_sample[set] == 1 ) 
    {
        uint32_t fill_cpu = fill_core[set][way];
        
        // update signature based on what is getting evicted
        if (line_reuse[set][way] == FALSE) { 
            SHCT[fill_cpu][sig].counter = SAT_DEC(SHCT[fill_cpu][sig].counter);
        }
        else 
        {
            	SHCT[fill_cpu][sig].counter = SAT_INC(SHCT[fill_cpu][sig].counter, maxSHCTR);
        }
	if(pmc_level == 0)
	{
		SHCT[fill_cpu][sig].pmcl = SAT_DEC(SHCT[fill_cpu][sig].pmcl);
	}	
	else if (pmc_level == 3)
	{
		SHCT[fill_cpu][sig].pmcl = SAT_INC(SHCT[fill_cpu][sig].pmcl, maxSHCTR);
	}


        line_reuse[set][way] = FALSE;
        line_sig[set][way]   = new_sig;  
        fill_core[set][way]  = cpu;
    }



    is_prefetch[set][way] = (type == PREFETCH);

    // Now determine the insertion prediciton

    uint32_t priority_RRPV = maxRRPV-1 ; // default SHIP

    if( type == WRITEBACK )
    {
        line_rrpv[set][way] = maxRRPV;
    }
    else if (SHCT[cpu][new_sig].counter == 0) {
      line_rrpv[set][way] = (rand()%100>=RRIP_OVERRIDE_PERC)?  maxRRPV: priority_RRPV; //LowPriorityInstallMostly
    }
    else if (SHCT[cpu][new_sig].counter == 7) {
        line_rrpv[set][way] = (type == PREFETCH) ? 1 : 0; // HighPriority Install
    }
    else 
    {
	if(SHCT[cpu][new_sig].pmcl == 0)
	{
		line_rrpv[set][way] = 6;
	}
	else if (SHCT[cpu][new_sig].pmcl == 7)
	{
		line_rrpv[set][way] = 2;
	}
	else
	{
		line_rrpv[set][way] = 4;
	}
    }

    // Stat tracking for what insertion it was at
    insertion_distrib[type][line_rrpv[set][way]]++;


}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
