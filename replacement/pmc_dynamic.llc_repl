#include "cache.h"

#define maxPMCL 3

uint32_t pmcl[LLC_SET][LLC_WAY];
uint32_t miss_count = 0;
uint32_t larger;
uint32_t smaller;
uint32_t thresh = 350;
uint32_t miss_period = LLC_WAY * LLC_SET / 2;


uint32_t level_0_low = 0;
uint32_t level_0_high = 49;
uint32_t level_1_low = 50;
uint32_t level_1_high = 99;
uint32_t level_2_low = 100;
uint32_t level_2_high = 149;
uint32_t level_3_low = 150;
uint32_t level_3_high = 199;
uint32_t level_4_low = 200;
uint32_t level_4_high = 249;
uint32_t level_5_low = 250;
uint32_t level_5_high = 299;
uint32_t level_6_low = 300;
uint32_t level_6_high = 349;
uint32_t level_7_low = 350;




// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize Pure Miss Contribution Based Replacement" << endl;
    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            pmcl[i][j] = 0;
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
   
    int way = 0;
    for (way=0; way<LLC_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            return way;
        }
    }
	
    int candidate[LLC_WAY];
    for(int i = 0; i < LLC_WAY; i++)
    {
        candidate[i] = 0;
    }    

    int tag = 0;
    // look for the minPMC line
    if(way==LLC_WAY)
    {
    	while (1)
    	{
        	for (int i=0; i<LLC_WAY; i++)
		{
            		if (pmcl[set][i] == 0)
			{	
				candidate[i] = 1;
      				tag = 1;				
			}
		}
		
		if(tag==1)
		{
			break;
		}
		else
		{
        		for (int i=0; i<LLC_WAY; i++)
			{
	    			if (pmcl[set][i] > 0)
				{
                			pmcl[set][i]--;
    				}
			}
		}	
	}
    }
   
    uint32_t compareLru = 0;
    for(int i = 0; i < LLC_WAY; i++)
    {	
	if(candidate[i] == 1)
	{
		if(block[set][i].lru >= compareLru)
		{
			way = i;
			compareLru = block[set][i].lru;
		}
	}
    }
   
    return way;

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
  
    if(miss_count >= miss_period)
    {
	miss_count = 0;
        if(larger < miss_period * (0.5/100))
	{
		uint32_t num = thresh / 7;
		num = num - 10;
		level_0_low = 0;
		level_0_high = level_0_low + num - 1;
		level_1_low = level_0_high + 1;
		level_1_high = level_1_low + num - 1;
                level_2_low = level_1_high + 1;
                level_2_high = level_2_low + num - 1;
                level_3_low = level_2_high + 1;
                level_3_high = level_3_low + num - 1;
                level_4_low = level_3_high + 1;
                level_4_high = level_4_low + num - 1;
                level_5_low = level_4_high + 1;
                level_5_high = level_5_low + num - 1;
                level_6_low = level_5_high + 1;
                level_6_high = level_6_low + num - 1;
		thresh = thresh - 70;
		larger = 0;
	}
	else if (larger > miss_period * (5/100))
	{
		uint32_t num = thresh / 7;
		num = num + 10;
		level_0_low = 0;
		level_0_high = level_0_low + num - 1;
                level_1_low = level_0_high + 1;
                level_1_high = level_1_low + num - 1;
                level_2_low = level_1_high + 1;
                level_2_high = level_2_low + num - 1;
                level_3_low = level_2_high + 1;
                level_3_high = level_3_low + num - 1;
                level_4_low = level_3_high + 1;
                level_4_high = level_4_low + num - 1;
                level_5_low = level_4_high + 1;
                level_5_high = level_5_low + num - 1;
                level_6_low = level_5_high + 1;
                level_6_high = level_6_low + num - 1;
		thresh = thresh + 70;
                larger = 0;
	}
    }

    if (hit)
    {
	if(pmcl[set][way] < maxPMCL && type != WRITEBACK)
	{
        	//pmcl[set][way]++;
		pmcl[set][way] = maxPMCL;
	}
	else if (pmcl[set][way] < maxPMCL && type == WRITEBACK)
	{
		pmcl[set][way]++;
	}
    }    
    else
    {
	cout << "in  llc_update_replacement_state pmc: " << block[set][way].pmc << endl;
	if(type == WRITEBACK)
	{
		pmcl[set][way] = 0;
	}
	else if(level_0_low <= block[set][way].pmc && block[set][way].pmc <= level_0_high)
	{
		pmcl[set][way] = 0;
	}
	else if (level_1_low <= block[set][way].pmc && block[set][way].pmc <= level_3_high)
	{
		pmcl[set][way] = 1;
	}
	else if (level_4_low <= block[set][way].pmc && block[set][way].pmc <= level_6_high)
	{
		pmcl[set][way] = 1;
	}
	else
	{
		pmcl[set][way] = 3;
	}
	cout << pmcl[set][way] << endl;    
	miss_count++;
	if(block[set][way].pmc >= thresh)
	{
		larger++;
	}
     }

}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
